version: "3.5"

networks:
  webb:
    driver: bridge

services:
  db:
    image: postgres:14
    restart: always
    container_name: "db"
    command: postgres -c 'max_connections=600'
    environment:
      POSTGRES_PASSWORD: ""
      POSTGRES_USER: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    networks:
      - webb
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  sig-provider:
    platform: linux/x86_64
    image: ghcr.io/blockscout/sig-provider:${SIG_PROVIDER_DOCKER_TAG:-main}
    pull_policy: always
    restart: always
    container_name: "sig-provider"
    networks:
      - webb
    ports:
      - 8151:8050
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  smart-contract-verifier:
    platform: linux/x86_64
    image: ghcr.io/blockscout/smart-contract-verifier:${SMART_CONTRACT_VERIFIER_DOCKER_TAG:-main}
    pull_policy: always
    networks:
      - webb
    restart: always
    container_name: "smart-contract-verifier"
    ports:
      - 8150:8050
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  visualizer:
    platform: linux/x86_64
    image: ghcr.io/blockscout/visualizer:${VISUALIZER_DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    container_name: "visualizer"
    networks:
      - webb
    ports:
      - 8152:8050
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  caddy:
    image: caddy:alpine
    container_name: caddy
    restart: unless-stopped
    networks:
      - webb
    env_file: .env
    ports:
      - "80:80"
      - "443:443"
      # - "2019:2019"
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - ./data/caddy:/data
      - ./data/caddy_config:/config
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  athena_blockscout:
    depends_on:
      - db
      - smart-contract-verifier
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: "athena-blockscout"
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    networks:
      - webb
    env_file:
      - .env
    environment:
      ETHEREUM_JSONRPC_HTTP_URL: http://athena_chain:8545/
      ETHEREUM_JSONRPC_WS_URL: ws://athena_chain:8545/
      DATABASE_URL: postgresql://postgres:@db:5432/athena_blockscout?ssl=false
      CHAIN_ID: "${ATHENA_CHAIN_ID}"
      PORT: "${ATHENA_CHAIN_EXPLORER_PORT}"
      SUBNETWORK: "${ATHENA_CHAIN_SUBNETWORK}"
      BLOCKSCOUT_HOST: "athena-explorer.${DOMAIN}"
    volumes:
      - ./logs/athena_blockscout/:/app/logs/
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  hermes_blockscout:
    depends_on:
      - db
      - smart-contract-verifier
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    stop_grace_period: 5m
    container_name: "hermes-blockscout"
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    networks:
      - webb
    env_file:
      - .env
    environment:
      ETHEREUM_JSONRPC_HTTP_URL: http://hermes_chain:8545/
      ETHEREUM_JSONRPC_WS_URL: ws://hermes_chain:8545/
      DATABASE_URL: postgresql://postgres:@db:5432/hermes_blockscout?ssl=false
      CHAIN_ID: "${HERMES_CHAIN_ID}"
      PORT: "${HERMES_CHAIN_EXPLORER_PORT}"
      SUBNETWORK: "${HERMES_CHAIN_SUBNETWORK}"
      BLOCKSCOUT_HOST: "hermes-explorer.${DOMAIN}"
    volumes:
      - ./logs/hermes_blockscout:/app/logs/

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  demeter_blockscout:
    depends_on:
      - db
      - smart-contract-verifier
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    networks:
      - webb
    stop_grace_period: 5m
    container_name: "demeter-blockscout"
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    env_file:
      - .env
    environment:
      ETHEREUM_JSONRPC_HTTP_URL: http://demeter_chain:8545/
      ETHEREUM_JSONRPC_WS_URL: ws://demeter_chain:8545/
      DATABASE_URL: postgresql://postgres:@db:5432/demeter_blockscout?ssl=false
      CHAIN_ID: "${DEMETER_CHAIN_ID}"
      PORT: "${DEMETER_CHAIN_EXPLORER_PORT}"
      SUBNETWORK: "${DEMETER_CHAIN_SUBNETWORK}"
      BLOCKSCOUT_HOST: "demeter-explorer.${DOMAIN}"
    volumes:
      - ./logs/demeter_blockscout:/app/logs/
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  tangle_blockscout:
    depends_on:
      - db
      - smart-contract-verifier
    image: blockscout/blockscout:${DOCKER_TAG:-latest}
    pull_policy: always
    restart: always
    networks:
      - webb
    stop_grace_period: 5m
    container_name: "tangle-blockscout"
    links:
      - db:database
    command: bash -c "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    env_file:
      - .env
    environment:
      ETHEREUM_JSONRPC_VARIANT: geth
      ETHEREUM_JSONRPC_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:9944/
      ETHEREUM_JSONRPC_WS_URL: ws://${DOCKER_GATEWAY_HOST:-host.docker.internal}:9944/
      ETHEREUM_JSONRPC_TRACE_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:9944/
      DATABASE_URL: postgresql://postgres:@db:5432/tangle_blockscout?ssl=false
      ETHEREUM_JSONRPC_DEBUG_TRACE_TRANSACTION_TIMEOUT: 5m
      INDEXER_INTERNAL_TRANSACTIONS_TRACER_TYPE: js
      CHAIN_ID: "${TANGLE_CHAIN_ID}"
      PORT: "${TANGLE_CHAIN_EXPLORER_PORT}"
      SUBNETWORK: "${TANGLE_CHAIN_SUBNETWORK}"
      BLOCKSCOUT_HOST: "tangle-explorer.${DOMAIN}"
    ports:
     - ${TANGLE_CHAIN_EXPLORER_PORT}:${TANGLE_CHAIN_EXPLORER_PORT}
    volumes:
      - ./logs/tangle_blockscout:/app/logs/
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

